Git commands ->
	1. git ( lists common commands which ensures successful installation of git )
	2. pwd ( present working directory - linux command )
	3. cd ( change directory )
	4. git status ( tells whether pwd ( or any of its parent directory ) is git repository or not ) 
	5. git config --global user.name "ABC"  ( sets the name of user to ABC -> necessary to identify who pushed the changes )
	6. git config --global user.email "A@gmail.com"  ( sets the name of user to A@gmail.com )
	7. git config user.name ( gives name of user )
	8. git config --list ( lists all info about current configuration )
	9. git init ( marks the pwd as the git repository )
	10. git add --a ( adds all the files with untracked / new changes to staging area )
	11. git commit -m "commit message" ( commits all the changes in staging area wih optional msg ) 
	12. git log ( to identify all the commits done by user )
	13. git add filename.ext ( adds specific file to the staging area, useful when we dont want to add all modified files to staging area )
	14. rm -rf .git ( removes .git folder from pwd, meaning the pwd wont be a git repository anymore )
	15. git clone github_project_website_address localNameForThatProject ( clones the remote git project locally, So, we can make changes locally and finally submit them remotely ( merge ) )
	16. touch filename.ext ( creates a file with given name and ext )
	17. touch .gitignore ( special file created to ignore specific files during git staging and commiting )
	18. blank folders are automatically ignored by git. It wont consider them for staging and commiting
	19. if we add a file to staging area and then modify it, then after running git status, that file will be shown as ready to commit as well as in modified files section
		then,
		git diff ( will show the difference between staged file and modified file )
	20. git restore ( for above condition, this command will remove all modifications in file and restore it back to staged file )
	21. git diff --staged ( difference between staging area and last commit )
	22. git commit -a -m "commit_msg" ( This commands takes all "tracked" files into staging area and then commits them. Note - This commands cant commit untracked files (which are not previously added to staging area))
	23. git rm filename.ext ( removes file from repository and adds this change to staging area )
	24. git mv firstName.ext secondName.ext ( rename a file from first name to second and adds this change to staging area )
	25. git rm --cached filename.ext ( stops tracking the changes in the file with given name )
		adding filename in gitignore file doesnt stops tracking changes of that file. to do that, run this above commands
	26. gitignore is used to ignore untracked files while, above command is used to stop tracking previously tracked files
	27. git log -p ( shows differences made by all commits by all people in project )
	28. git log -p -n ( n is any integer no. , shows last n commits and differences made by them )
	29. git log --stat ( shows changes made by all commits in short or few details )
	30. git log --pretty=oneline ( each commit info in one line each )
	31. git log --pretty=short ( each commit info in short )
	32. git log --pretty=full ( each commit with some more info than short command )
	33. git log --since=2.days ( all the commits done in last 2 days ( weeks, months, years ) )
	34. git log --pretty=format:%h -- $an ( formats displaying of log, has more options )
	35. git commit --amend ( modify last commit )
	36. git restore --staged filename.ext ( moves file from staged area to unstaged area )
	37. git checkout -- filename.ext ( removes all modifications in file and makes it same as last commit )
	38. git checkout -f ( removes all modifications in all files and makes them as last commit )
	39. git remote ( gives the name of remote repository on which we are working )
	40. git remote -v ( gives the names of repository on which you are doing push and pulling from )
	41. git remote add origin https://github.com/grchougule/gitTutorial.git ( adds a new remote repository on given website with given name )
	42. git push -u origin master ( pushes current master branch on local machine to remote repository named origin )
	43. if opening github for first time, you might need to add ssh keys to establish trust. To know steps/ commands to create ssh keys, google it
	44. git config --global alias.st status ( this creates alias for 'status' as 'st' )
	45. git checkout -b branchName ( creates and takes you to the new branch )
	46. git branch ( shows all branches that you have created )
	47. git branch otherBranchName ( merges the branch with master branch )
	48. git branch -v ( all branches names with their last commit info )
	49. git branch --merged ( all branches that are already merged )
	50. git branch --no-merged ( all branches that are not yet merged )
	51. git branch -d branchName ( deletes a branch if its already merged, gives error if not merged )
	52. git branch -D branchName ( deletes branch even if its not merged )
	